# Generated by Django 5.0.1 on 2024-04-12 10:51

from django.db import migrations
import sys
sys.path.insert(1, '../scripts')
from django.contrib.auth.hashers import make_password
import random
import secrets
import string
import logging

from scripts import excel_parser

def parse_data_table(apps, schema_editor):
    dict = excel_parser.read_excel("/Volumes/DATA/DEV/django-rdcapp/scripts/EMPLOYEES_ALL__5.csv")
    # return dict
    print(f"LEN: {len(dict)}")
    print(f"SOMEDICT: {dict[2]}")
    for record in dict:
        # print(record)
        # print(dict.get(record))
        # print(dict[record])
        add_to_model(apps=apps, schema_editor=schema_editor, dict=dict[record])

def add_to_model(apps, schema_editor, dict):
    print(f"DICT: {dict}")
    CHARACTERLIST = string.ascii_letters + string.digits + string.punctuation
    PWD_LENGTH = 8
    '''
    Добавление данных в новую модель
    '''
    Employee = apps.get_model("rdcapp_api", "Employee")
    User = apps.get_model("auth", "User")
    EmployeePost = apps.get_model("rdcapp_api", "EmployeePost")
    Post = apps.get_model("rdcapp_api", "Post")
    if User.objects.filter(username=dict.get('username')).exists():
        print("CREATING_EMPLOYEE")
        Employee.objects.create(
            firstname = dict.get('firstname'),
            lastname = dict.get('lastname'),
            patronymic = dict.get('patronymic'),
            dateofbirth = dict.get('dateofbirth'),
            sex = dict.get('sex'),
            snils = dict.get('snils'),
            email = dict.get('email'),
            phone_number = dict.get('phone'),
            telegram_username = dict.get('telegram_username'),
            quote = dict.get('quote'),
            region_id = dict.get('region_id'),
            user = User.objects.filter(username=dict.get('username'))
        )
    else:
        pwd = ''
        for i in range(PWD_LENGTH):
            pwd += ''.join(secrets.choice(CHARACTERLIST))
        logging.info(f"User {dict.get('username')}, password: {pwd}")
        print("CREATING_USER")
        new_user=User.objects.create(
            username = dict.get('username'),
            first_name = dict.get('firstname'),
            last_name = dict.get('lastname'),
            email = dict.get('email'),
            password = make_password(pwd)
        )
        print("CREATING_EMPLOYEE")
        new_employee = Employee.objects.create(
            firstname = dict.get('firstname'),
            lastname = dict.get('lastname'),
            patronymic = dict.get('patronymic'),
            dateofbirth = dict.get('dateofbirth'),
            sex = dict.get('sex'),
            snils = dict.get('snils'),
            email = dict.get('email'),
            phone_number = dict.get('phone'),
            telegram_username = dict.get('telegram_username'),
            quote = dict.get('quote'),
            region_id = dict.get('region_id'),
            user = new_user
        )
    if EmployeePost.objects.filter(tab_number=str(dict.get('tab_number')).zfill(5)).exists()==False:
        print("CREATING_EMPLOYEE_POST")
        print(new_user)
        print(new_employee) 
        print(Employee.objects.filter(user=new_user))
        post_ = list(Post.objects.filter(id=dict.get('post_id')))
        print(post_)
        EmployeePost.objects.create(
            employee = new_employee,
            post = post_[0],
            tab_number = str(dict.get('tab_number')).zfill(5),
            rate = dict.get('rate'),
            employment = dict.get('employment'),
            join_date = dict.get('join_date'),
        )


class Migration(migrations.Migration):
    logging.basicConfig(level=logging.INFO, filename="py_log.log",filemode="w")

    dependencies = [
        ('rdcapp_api', '0005_eduinstitutionemployee'),
    ]

    operations = [
        migrations.RunPython(parse_data_table)
    ]
